#include "BLEDevice.h"
#include <Wire.h>

#define bleServerName "YOYOESP32"

static BLEUUID bmeServiceUUID("91bad492-b950-4226-aa2b-4ede9fa42f59");

static BLEUUID 
sensordata1characterUUID("f78ebbff-c8b7-4107-93de-889a6a06d408");
static BLEUUID 
sensordata2characterUUID("1f9aa0cc-0b03-4d3a-a347-9bab0081395d");
static BLEUUID 
sensordata3characterUUID("e3f674f6-d6f6-4ac8-9cb8-3e96c2ec0106");

static boolean doConnect = false;
static boolean connected = false;

static BLEAddress *pServerAddress;
 
//Characteristicd that we want to read
static BLERemoteCharacteristic* sensordata1character;
static BLERemoteCharacteristic* sensordata2character;
static BLERemoteCharacteristic* sensordata3character;


//Activate notify
const uint8_t notificationOn[] = {0x1, 0x0};
const uint8_t notificationOff[] = {0x0, 0x0};

char* sensordata1Char;
char* sensordata2Char;
char* sensordata3Char;

static char receivedData[5];  
static char receivedData2[5];  
static char receivedData3[5];  


boolean newSensordata1 = false;
boolean newSensordata2 = false;
boolean newSensordata3 = false;

bool connectToServer(BLEAddress pAddress) {
  BLEClient* pClient = BLEDevice::createClient();
  pClient->connect(pAddress);
  Serial.println(" - Connected to server");
  BLERemoteService* pRemoteService = pClient->getService(bmeServiceUUID);
  if (pRemoteService == nullptr) {
    Serial.print("Failed to find our service UUID: ");
    Serial.println(bmeServiceUUID.toString().c_str());
    return (false);
  }
 
  sensordata1character = pRemoteService->getCharacteristic(sensordata1characterUUID);
  sensordata2character = pRemoteService->getCharacteristic(sensordata2characterUUID);
  sensordata3character = pRemoteService->getCharacteristic(sensordata3characterUUID);
  
  if (sensordata1character == nullptr||sensordata2character == nullptr ||sensordata3character == nullptr ) {
    Serial.print("Failed to find our characteristic UUID");
    return false;
  }
  Serial.println(" - Found our characteristics");
  sensordata1character->registerForNotify(sensordata1NotifyCallback);
  sensordata2character->registerForNotify(sensordata2NotifyCallback);
  sensordata3character->registerForNotify(sensordata3NotifyCallback);
  return true;
}


class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    if (advertisedDevice.getName() == bleServerName) { 
      advertisedDevice.getScan()->stop(); 
      pServerAddress = new BLEAddress(advertisedDevice.getAddress()); 
      doConnect = true; 
      Serial.println("Device found. Connecting!");
    }
  }
};
 


/*static void sensordata1NotifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, 
                                    uint8_t* pData, size_t length, bool isNotify) {
  sensordata1Char = (char*)pData;
  newSensordata1 = true;
}
*/

static void sensordata1NotifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, 
                                    uint8_t* pData, size_t length, bool isNotify) {
  strncpy(receivedData, (char*)pData, 4);
  receivedData[4] = '\0';  
  newSensordata1 = true;
}

static void sensordata2NotifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, 
                                    uint8_t* pData, size_t length, bool isNotify) {
  strncpy(receivedData2, (char*)pData, 4);
  receivedData2[4] = '\0';  
  newSensordata2 = true;
}

static void sensordata3NotifyCallback(BLERemoteCharacteristic* pBLERemoteCharacteristic, 
                                    uint8_t* pData, size_t length, bool isNotify) {
  strncpy(receivedData3, (char*)pData, 4);
  receivedData3[4] = '\0';  
  newSensordata3 = true;
}

void setup() {

  //Start serial communication
  Serial.begin(115200);
  Serial.println("Starting Arduino BLE Client application...");

  //Init BLE device
  BLEDevice::init("");
 
  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->start(30);
}

void loop() {
 
  if (doConnect == true) {
    if (connectToServer(*pServerAddress)) {
      Serial.println("We are now connected to the BLE Server.");
      //Activate the Notify property of each Characteristic
      sensordata1character->getDescriptor(BLEUUID((uint16_t)0x2902))->writeValue((uint8_t*)notificationOn, 2, true);
      sensordata2character->getDescriptor(BLEUUID((uint16_t)0x2902))->writeValue((uint8_t*)notificationOn, 2, true);
      sensordata3character->getDescriptor(BLEUUID((uint16_t)0x2902))->writeValue((uint8_t*)notificationOn, 2, true);
      connected = true;
      
    } 

else {
      Serial.println("We have failed to connect to the server; Restart your device to scan for nearby BLE server again.");
    }
    doConnect = false;
  }

  if (connected && newSensordata1 && newSensordata2 && newSensordata3 ){
    newSensordata1 = false;
    //newSensordata2 = false;
    //newSensordata3 = false;
    Serial.println(sensordata1Char);
    Serial.print("data1:");
    Serial.print(receivedData);
    Serial.print("data2:");
    Serial.print(receivedData2);
    Serial.print("data3:");
    Serial.println(receivedData3);
  }
  //delay(20); // Delay a second between loops.
  //Serial.println(sensordata1Char);
      delay(100);
}
